{"/home/travis/build/npmtest/node-npmtest-gpg/test.js":"/* istanbul instrument in package npmtest_gpg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gpg/lib.npmtest_gpg.js":"/* istanbul instrument in package npmtest_gpg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gpg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gpg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gpg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gpg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gpg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gpg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gpg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gpg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gpg.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gpg.__dirname +\n                    '/lib.npmtest_gpg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gpg/node_modules/gpg/lib/gpg.js":"/*!\n * node-gpg\n * Copyright(c) 2011 Nicholas Penree <drudge@conceited.net>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = require('fs');\nvar spawnGPG = require('./spawnGPG');\nvar keyRegex = /^gpg: key (.*?):/;\n\n/**\n * Base `GPG` object.\n */\nvar GPG = {\n\n  /**\n   * Raw call to gpg.\n   *\n   * @param  {String}   stdin  String to send to stdin.\n   * @param  {Array}    [args] Array of arguments.\n   * @param  {Function} [fn]   Callback.\n   * @api public\n   */\n  call: function(stdin, args, fn) {\n    spawnGPG(stdin, args, fn);\n  },\n\n  /**\n   * Raw streaming call to gpg. Reads from input file and writes to output file.\n   *\n   * @param  {String}   inputFileName  Name of input file.\n   * @param  {String}   outputFileName Name of output file.\n   * @param  {Array}    [args]         Array of arguments.\n   * @param  {Function} [fn]           Callback.\n   * @api public\n   */\n  callStreaming: function(inputFileName, outputFileName, args, fn) {\n    spawnGPG.streaming({source: inputFileName, dest: outputFileName}, args, fn);\n  },\n\n  /**\n   * Encrypt source file passed as `options.source` and store it in a file specified in `options.dest`.\n   *\n   * @param {Object}   options  Should contain 'source' and 'dest' keys.\n   * @param {Function} [fn]     Callback.\n   * @api public\n   */\n  encryptToFile: function (options, fn){\n    spawnGPG.streaming(options, ['--encrypt'], fn);\n  },\n\n  /**\n   * Encrypt source `file` and pass the encrypted contents to the callback `fn`.\n   *\n   * @param {String}   file   Filename.\n   * @param {Function} [fn]   Callback containing the encrypted file contents.\n   * @api public\n   */\n  encryptFile: function(file, fn){\n    var self = this;\n\n    fs.readFile(file, function(err, content){\n      if (err) return fn(err);\n      self.encrypt(content, fn);\n    });\n  },\n\n  /**\n   * Encrypt source stream passed as `options.source` and pass it to the stream specified in `options.dest`.\n   * Is basicaly the same method as `encryptToFile()`.\n   *\n   * @param {Object}   options  Should contain 'source' and 'dest' keys that are streams.\n   * @param {Function} [fn]     Callback.\n   * @api public\n   */\n  encryptToStream: function (options, fn){\n    spawnGPG.streaming(options, ['--encrypt'], fn);\n  },\n\n  /**\n   * Encrypt source `stream` and pass the encrypted contents to the callback `fn`.\n   *\n   * @param {ReadableStream} stream Stream to read from.\n   * @param {Array}          [args] Array of additonal gpg arguments.\n   * @param {Function}       [fn]   Callback containing the encrypted file contents.\n   * @api public\n   */\n  encryptStream: function (stream, args, fn){\n    var self   = this;\n    var chunks = [];\n\n    stream.on('data', function (chunk){\n      chunks.push(chunk);\n    });\n\n    stream.on('end', function (){\n      self.encrypt(Buffer.concat(chunks), args, fn);\n    });\n\n    stream.on('error', fn);\n  },\n\n  /**\n   * Encrypt `str` and pass the encrypted version to the callback `fn`.\n   *\n   * @param {String|Buffer}   str    String to encrypt.\n   * @param {Array}    [args] Array of additonal gpg arguments.\n   * @param {Function} [fn]   Callback containing the encrypted Buffer.\n   * @api public\n   */\n  encrypt: function(str, args, fn){\n    spawnGPG(str, ['--encrypt'], args, fn);\n  },\n\n  /**\n   * Decrypt `str` and pass the decrypted version to the callback `fn`.\n   *\n   * @param {String|Buffer} str    Data to decrypt.\n   * @param {Array}         [args] Array of additonal gpg arguments.\n   * @param {Function}      [fn]   Callback containing the decrypted Buffer.\n   * @api public\n   */\n  decrypt: function(str, args, fn){\n    spawnGPG(str, ['--decrypt'], args, fn);\n  },\n\n  /**\n   * Decrypt source `file` and pass the decrypted contents to the callback `fn`.\n   *\n   * @param {String}   file Filename.\n   * @param {Function} fn   Callback containing the decrypted file contents.\n   * @api public\n   */\n  decryptFile: function(file, fn){\n    var self = this;\n\n    fs.readFile(file, function(err, content){\n      if (err) return fn(err);\n      self.decrypt(content, fn);\n    });\n  },\n\n  /**\n   * Decrypt source file passed as `options.source` and store it in a file specified in `options.dest`.\n   *\n   * @param {Object}   options  Should contain 'source' and 'dest' keys.\n   * @param {Function} fn       Callback\n   * @api public\n   */\n  decryptToFile: function (options, fn){\n    spawnGPG.streaming(options, ['--decrypt'], fn);\n  },\n\n  /**\n   * Decrypt source `stream` and pass the decrypted contents to the callback `fn`.\n   *\n   * @param {ReadableStream} stream Stream to read from.\n   * @param {Array}          [args] Array of additonal gpg arguments.\n   * @param {Function}       [fn]   Callback containing the decrypted file contents.\n   * @api public\n   */\n  decryptStream: function(stream, args, fn){\n    var self   = this;\n    var chunks = [];\n\n    stream.on('data', function (chunk){\n      chunks.push(chunk);\n    });\n\n    stream.on('end', function (){\n      self.decrypt(Buffer.concat(chunks), args, fn);\n    });\n\n    stream.on('error', fn);\n  },\n\n  /**\n   * Decrypt source stream passed as `options.source` and pass it to the stream specified in `options.dest`.\n   * This is basicaly the same method as `decryptToFile()`.\n   *\n   * @param {Object}   options  Should contain 'source' and 'dest' keys that are streams.\n   * @param {Function} fn       Callback\n   * @api public\n   */\n  decryptToStream: function (options, fn){\n    spawnGPG.streaming(options, ['--decrypt'], fn);\n  },\n\n  /**\n   * Clearsign `str` and pass the signed message to the callback `fn`.\n   *\n   * @param {String|Buffer} str  String to clearsign.\n   * @param {Array}         [args] Array of additonal gpg arguments.\n   * @param {Function}      fn   Callback containing the signed message Buffer.\n   * @api public\n   */\n  clearsign: function(str, args, fn){\n    spawnGPG(str, ['--clearsign'], args, fn);\n  },\n\n  /**\n   * Verify `str` and pass the output to the callback `fn`.\n   *\n   * @param {String|Buffer} str    Signature to verify.\n   * @param {Array}         [args] Array of additonal gpg arguments.\n   * @param {Function}      [fn]   Callback containing the signed message Buffer.\n   * @api public\n   */\n  verifySignature: function(str, args, fn){\n    // Set logger fd, verify otherwise outputs to stderr for whatever reason\n    var defaultArgs = ['--logger-fd', '1', '--verify'];\n    spawnGPG(str, defaultArgs, args, fn);\n  },\n\n  /**\n   * Add a key to the keychain by filename.\n   *\n   * @param {String}  fileName  Key filename.\n   * @param {Array}   [args]    Array of additonal gpg arguments.\n   * @param {Function} [fn]     Callback containing the signed message Buffer.\n   * @api public\n   */\n  importKeyFromFile: function(fileName, args, fn){\n    if (typeof args === 'function') {\n      fn = args;\n      args = [];\n    }\n\n    var self = this;\n\n    fs.readFile(fileName, function(readErr, str) {\n      if (readErr) return fn(readErr);\n      self.importKey(str, args, fn);\n    });\n  },\n\n  /**\n   * Add an ascii-armored key to gpg. Expects the key to be passed as input.\n   *\n   * @param {String}   keyStr  Key string (armored).\n   * @param {Array}    args    Optional additional arguments to pass to gpg.\n   * @param {Function} fn      Callback containing the signed message Buffer.\n   * @api public\n   */\n  importKey: function(keyStr, args, fn){\n    if (typeof args === 'function') {\n      fn = args;\n      args = [];\n    }\n\n    // Set logger fd, verify otherwise outputs to stderr for whatever reason\n    var defaultArgs = ['--logger-fd', '1', '--import'];\n\n    spawnGPG(keyStr, defaultArgs, args, function(importError, result) {\n      if (importError) {\n        // Ignorable errors\n        if (/already in secret keyring/.test(importError.message)) {\n          result = importError.message;\n        } else {\n          return fn(importError);\n        }\n      }\n      // Grab key fingerprint and send it back as second arg\n      var match = result.toString().match(keyRegex);\n      fn(null, result.toString(), match && match[1]);\n    });\n  },\n\n  /**\n   * Removes a key by fingerprint. Warning: this will remove both pub and privkeys!\n   *\n   * @param {String}   keyID  Key fingerprint.\n   * @param {Array}    [args] Array of additonal gpg arguments.\n   * @param {Function} fn     Callback containing the signed message Buffer.\n   * @api public\n   */\n  removeKey: function(keyID, args, fn){\n    // Set logger fd, verify otherwise outputs to stderr for whatever reason\n    var defaultArgs = ['--logger-fd', '1', '--delete-secret-and-public-key'];\n    spawnGPG(keyID, defaultArgs, args, fn);\n  }\n\n};\n\n/**\n * Expose `GPG` object.\n */\nmodule.exports = GPG;\n","/home/travis/build/npmtest/node-npmtest-gpg/node_modules/gpg/lib/spawnGPG.js":"'use strict';\n\nvar spawn = require('child_process').spawn;\nvar globalArgs = ['--batch'];\nvar readStream = require('fs').createReadStream;\nvar writeStream = require('fs').createWriteStream;\n\n/**\n * Wrapper around spawning GPG. Handles stdout, stderr, and default args.\n *\n * @param  {String}   input       Input string. Piped to stdin.\n * @param  {Array}    defaultArgs Default arguments for this task.\n * @param  {Array}    args        Arguments to pass to GPG when spawned.\n * @param  {Function} cb          Callback.\n */\nmodule.exports = function(input, defaultArgs, args, cb) {\n  // Allow calling with (input, defaults, cb)\n  if (typeof args === 'function'){\n    cb = args;\n    args = [];\n  }\n\n  cb = once(cb);\n\n  var gpgArgs = (args || []).concat(defaultArgs);\n  var buffers = [];\n  var buffersLength = 0;\n  var error = '';\n  var gpg = spawnIt(gpgArgs, cb);\n\n  gpg.stdout.on('data', function (buf){\n    buffers.push(buf);\n    buffersLength += buf.length;\n  });\n\n  gpg.stderr.on('data', function(buf){\n    error += buf.toString('utf8');\n  });\n\n  gpg.on('close', function(code){\n    var msg = Buffer.concat(buffers, buffersLength);\n    if (code !== 0) {\n      // If error is empty, we probably redirected stderr to stdout (for verifySignature, import, etc)\n      return cb(new Error(error || msg));\n    }\n\n    cb(null, msg, error);\n  });\n\n  gpg.stdin.end(input);\n};\n\n/**\n * Similar to spawnGPG, but sets up a read/write pipe to/from a stream.\n *\n * @param  {Object}   options Options. Should have source and dest strings or streams.\n * @param  {Array}    args    GPG args.\n * @param  {Function} cb      Callback\n */\nmodule.exports.streaming = function(options, args, cb) {\n  cb = once(cb);\n  options = options || {};\n\n  var isSourceStream = isStream(options.source);\n  var isDestStream   = isStream(options.dest);\n\n  if (typeof options.source !== 'string' && !isSourceStream){\n    return cb(new Error('Missing \\'source\\' option (string or stream)'));\n  } else if (typeof options.dest !== 'string' && !isDestStream){\n    return cb(new Error('Missing \\'dest\\' option (string or stream)'));\n  }\n\n  var sourceStream;\n  if (!isSourceStream) {\n    // This will throw if the file doesn't exist\n    try {\n      sourceStream = readStream(options.source);\n    } catch(e) {\n      return cb(new Error(options.source + ' does not exist. Error: ' + e.message));\n    }\n  } else {\n    sourceStream = options.source;\n  }\n\n  var destStream;\n  if (!isDestStream) {\n    try {\n      destStream = writeStream(options.dest);\n    } catch(e) {\n      return cb(new Error('Error opening ' + options.dest + '. Error: ' + e.message));\n    }\n  } else {\n    destStream = options.dest;\n  }\n\n  // Go for it\n  var gpg = spawnIt(args, cb);\n\n  if (!isDestStream) {\n    gpg.on('close', function (code){\n      cb(null);\n    });\n  } else {\n    cb(null, destStream);\n  }\n\n  // Pipe input file into gpg stdin; gpg stdout into output file..\n  sourceStream.pipe(gpg.stdin);\n  gpg.stdout.pipe(destStream);\n};\n\n// Wrapper around spawn. Catches error events and passed global args.\nfunction spawnIt(args, fn) {\n  var gpg = spawn('gpg', globalArgs.concat(args || []) );\n  gpg.on('error', fn);\n  return gpg;\n}\n\n// Ensures a callback is only ever called once.\nfunction once(fn) {\n  var called = false;\n  return function() {\n    if (called) return;\n    called = true;\n    fn.apply(this, arguments);\n  };\n}\n\n// Check if input is stream with duck typing\nfunction isStream (stream) {\n  return stream != null && typeof stream === 'object' && typeof stream.pipe === 'function';\n};\n"}